{"version":3,"sources":["Todo.react.js","Form.react.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","this","time","concat","getHours","getMinutes","getSeconds","_this","react_default","a","createElement","handleRemove","style","buttonStyle","onClick","Date","textDecoration","timeCompleted","value","renderTimeCompleted","React","Component","Form","inputStyle","fontSize","state","newtodo","_this2","onSubmit","e","preventDefault","addTodo","setState","type","name","onChange","target","App","tasks","freshState","styles","margin","width","secondsInTheDay","repeatAt","todos","Immutable","OrderedSet","finished","hour","f","_this3","now","date","getDate","wait","getFullYear","getMonth","getTime","console","log","setTimeout","setInterval","_this4","i","map","todo","Todo_react","key","oldState","remove","add","isEmpty","_ref","_ref2","Object","slicedToArray","_this5","renderTodos","Form_react","prevState","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"sPA6CeA,+KA9BNC,GACDC,KAAKD,MAAQA,8CAGGE,GAChB,SAAAC,OAAUD,EAAKE,WAAf,KAAAD,OAA6BD,EAAKG,aAAlC,KAAAF,OAAkDD,EAAKI,+CAGlD,IAAAC,EAAAN,KACL,OACIO,EAAAC,EAAAC,cAAA,WACKT,KAAKD,MAAMW,cAAgBH,EAAAC,EAAAC,cAAA,UACxBE,MAAOX,KAAKD,MAAMa,YAClBC,QAAS,WAAOP,EAAKP,MAAMW,cAAgBJ,EAAKP,MAAMW,aAAa,IAAII,QAF/C,KAK5BP,EAAAC,EAAAC,cAAA,QACIE,MAAO,CAACI,eAA4C,MAA5Bf,KAAKD,MAAMiB,cAAwB,eAAiB,YAC3EhB,KAAKD,MAAMkB,OAEa,MAA5BjB,KAAKD,MAAMiB,cACNT,EAAAC,EAAAC,cAAA,YAAO,IAAMT,KAAKkB,oBAAoBlB,KAAKD,MAAMiB,gBACjD,aAxBHG,IAAMC,WCmCVC,6MA/BXC,WAAa,CACTC,SAAU,UAGdC,MAAQ,CACJC,QAAS,4EAGJ,IAAAC,EAAA1B,KACL,OAAOO,EAAAC,EAAAC,cAAA,QACHkB,SAAU,SAAAC,GACNA,EAAEC,iBACFH,EAAK3B,MAAM+B,QAAQJ,EAAKF,MAAMC,SAC9BC,EAAKK,SAAS,CACVN,QAAS,OAIjBlB,EAAAC,EAAAC,cAAA,SACIuB,KAAK,OACLC,KAAK,UACLhB,MAAOjB,KAAKwB,MAAMC,QAClBS,SAAU,SAAAN,GAAC,OAAIF,EAAKK,SAAS,CAACN,QAASG,EAAEO,OAAOlB,SAChDN,MAAOX,KAAKsB,aAEhBf,EAAAC,EAAAC,cAAA,UAAQE,MAAOX,KAAKD,MAAMa,YAAaoB,KAAK,UAA5C,aA3BOb,IAAMC,WCiGVgB,6MA/FXC,MAAQ,CACJ,gBACA,0BACA,YACA,qBACA,eACA,uBAGJb,MAAQlB,EAAKgC,eAEbC,OAAS,CACLC,OAAQ,SACRC,MAAO,IACPlB,SAAU,UAGdX,YAAc,CACVW,SAAU,OACViB,OAAQ,YAGZE,gBAAkB,yFAEE,IAAAhB,EAAA1B,KAChBA,KAAK2C,SAAS,EAAG,WACbjB,EAAKK,SAASL,EAAKY,qDAKvB,MAAO,CACHM,MAAOC,IAAUC,WAAW9C,KAAKqC,OACjCU,SAAUF,IAAUC,+CAInBE,EAAcC,GAAe,IAAAC,EAAAlD,KAC5BmD,EAAM,IAAIrC,KACVsC,EAAOD,EAAIE,WAAaF,EAAIhD,WAAa6C,EAAO,EAAI,GAGpDM,EAFQ,IAAIxC,KAAKqC,EAAII,cAAeJ,EAAIK,WAAYJ,EAAMJ,EAAM,EAAG,EAAG,GAEzDS,UAAYN,EAAIM,UACnCC,QAAQC,IAAIL,GACZM,WAAW,WACPX,IACAY,YAAYZ,EAAGC,EAAKR,kBACrBY,yCAGO,IAAAQ,EAAA9D,KACN+D,EAAI,EACR,OACIxD,EAAAC,EAAAC,cAAA,UACKT,KAAKwB,MAAMoB,MAAMoB,IAAI,SAAAC,GAAI,OACtB1D,EAAAC,EAAAC,cAACyD,EAAD,CACIC,IAAKJ,IACL9C,MAAOgD,EACPrD,YAAakD,EAAKlD,YAClBF,aAAc,WAAOoD,EAAK/B,SAAS,SAAAqC,GAC/B,MAAO,CACHxB,MAAOkB,EAAKtC,MAAMoB,MAAMyB,OAAOJ,GAC/BlB,SAAUe,EAAKtC,MAAMuB,SAASuB,IAAI,CAACL,EAAM,IAAInD,gBAK3Dd,KAAKwB,MAAMuB,SAASwB,YAAcvE,KAAKwB,MAAMoB,MAAM2B,WAAahE,EAAAC,EAAAC,cAAA,WACjET,KAAKwB,MAAMuB,SAASiB,IAAI,SAAAQ,GAAA,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,GAAEP,EAAFQ,EAAA,GAAQrB,EAARqB,EAAA,UACrBlE,EAAAC,EAAAC,cAACyD,EAAD,CACIC,IAAKJ,IACL9C,MAAOgD,EACPrD,YAAakD,EAAKlD,YAClBI,cAAeoC,wCAO1B,IAAAwB,EAAA5E,KACL,OACIO,EAAAC,EAAAC,cAAA,OAAKE,MAAOX,KAAKuC,QACbhC,EAAAC,EAAAC,cAAA,oBACCT,KAAK6E,cACNtE,EAAAC,EAAAC,cAACqE,EAAD,CACIhD,QAAS,SAACmC,GAAUW,EAAK7C,SAAS,SAAAgD,GAAS,MAAK,CAACnC,MAAOmC,EAAUnC,MAAM0B,IAAIL,OAC5ErD,YAAaZ,KAAKY,sBAzFpBO,IAAMC,WCHlB4D,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBvE,QACfiE,UAAUC,cAAcQ,YAI1BxC,QAAQC,IACN,iHAKE6B,GAAUA,EAAOW,UACnBX,EAAOW,SAASN,KAMlBnC,QAAQC,IAAI,sCAGR6B,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUP,UAO5BQ,MAAM,SAAAC,GACL5C,QAAQ4C,MAAM,4CAA6CA,KC1FjEC,IAASC,OAAOjG,EAAAC,EAAAC,cAACgG,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAIC,GAAwB3B,OAAOC,SAAS2B,MACpDC,SAAW7B,OAAOC,SAAS4B,OAIvC,OAGF7B,OAAO8B,iBAAiB,OAAQ,WAC9B,IAAMzB,EAAK,GAAArF,OAAM2G,GAAN,sBAEP7B,GAgEV,SAAiCO,EAAOC,GAEtCyB,MAAM1B,GACHK,KAAK,SAAAsB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C9B,UAAUC,cAAc8B,MAAM5B,KAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,KAAK,WAC7BV,OAAOC,SAASuC,aAKpBpC,EAAgBC,EAAOC,KAG1Ba,MAAM,WACL3C,QAAQC,IACN,mEArFAgE,CAAwBpC,EAAOC,GAI/BC,UAAUC,cAAc8B,MAAM5B,KAAK,WACjClC,QAAQC,IACN,gHAMJ2B,EAAgBC,EAAOC,MCvC/BE","file":"static/js/main.372eb536.chunk.js","sourcesContent":["/*\n@flow strict-local\n*/\n\nimport React from 'react';\n\ntype Props = {|\n    buttonStyle: Object,\n    value: string,\n    timeCompleted?: Date, // Only present if completed\n    handleRemove?: (Date) => void, // Only present if not completed\n|};\n\nclass Todo extends React.Component<Props, {}> {\n\n    init(props: Props) {\n        this.props = props;\n    }\n\n    renderTimeCompleted(time: Date) {\n        return `${time.getHours()}:${time.getMinutes()}:${time.getSeconds()}`;\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.handleRemove && <button\n                    style={this.props.buttonStyle}\n                    onClick={() => {this.props.handleRemove && this.props.handleRemove(new Date())}}>\n                    X\n                </button>}\n                <span\n                    style={{textDecoration: this.props.timeCompleted != null ? 'line-through' : 'initial'}}>\n                    {this.props.value}\n                </span>\n                {this.props.timeCompleted != null\n                    ? <span>{' ' + this.renderTimeCompleted(this.props.timeCompleted)}</span>\n                    : null\n                }\n            </div>\n        );\n    }\n\n}\n\nexport default Todo;\n","/*\n@flow strict-local\n*/\n\nimport React from 'react';\n\ntype Props = {|\n    addTodo: (string) => void,\n    buttonStyle: Object,\n|};\n\ntype State = {|\n    newtodo: string,\n|};\n\nclass Form extends React.Component<Props, State> {\n\n    inputStyle = {\n        fontSize: '18pt',\n    }\n\n    state = {\n        newtodo: '',\n    }\n\n    render() {\n        return <form\n            onSubmit={e => {\n                e.preventDefault();\n                this.props.addTodo(this.state.newtodo);\n                this.setState({\n                    newtodo: '',\n                });\n            }}\n        >\n            <input\n                type='text'\n                name='newtodo'\n                value={this.state.newtodo}\n                onChange={e => this.setState({newtodo: e.target.value})}\n                style={this.inputStyle}\n            />\n            <button style={this.props.buttonStyle} type='button'>+</button>\n        </form>;\n    }\n\n}\n\nexport default Form;\n","/*\n@flow strict-local\n*/\n\nimport React from 'react';\nimport Immutable from 'immutable';\n\nimport Todo from './Todo.react.js';\nimport Form from './Form.react.js';\n\ntype State = {|\n    todos: Immutable.OrderedSet<string>,\n    finished: Immutable.OrderedSet<[string, Date]>,\n|}\n\nclass App extends React.Component<{}, State> {\n\n    tasks = [\n        'Put Tommy out',\n        'Feed and medicate Tommy',\n        'Feed cats',\n        'Fill animal waters',\n        'Wash bottles',\n        'Check diaper pail',\n    ]\n\n    state = this.freshState();\n\n    styles = {\n        margin: '0 auto',\n        width: 800,\n        fontSize: '24pt',\n    }\n\n    buttonStyle = {\n        fontSize: '18pt',\n        margin: '0 10px',\n    }\n\n    secondsInTheDay = 86400000;\n\n    componentDidMount() {\n        this.repeatAt(0, () => {\n            this.setState(this.freshState());\n        })\n    }\n\n    freshState() {\n        return {\n            todos: Immutable.OrderedSet(this.tasks),\n            finished: Immutable.OrderedSet(),\n        };\n    }\n\n    repeatAt(hour: number, f: () => void) {\n        const now = new Date();\n        const date = now.getDate() + (now.getHours() < hour ? 0 : 1);\n        const start = new Date(now.getFullYear(), now.getMonth(), date, hour, 0, 0, 0);\n\n        const wait = start.getTime() - now.getTime();\n        console.log(wait);\n        setTimeout(() => {\n            f();\n            setInterval(f, this.secondsInTheDay);\n        }, wait);\n    }\n\n    renderTodos() {\n        let i = 0;\n        return (\n            <ul>\n                {this.state.todos.map(todo =>\n                    <Todo\n                        key={i++}\n                        value={todo}\n                        buttonStyle={this.buttonStyle}\n                        handleRemove={() => {this.setState(oldState => {\n                            return {\n                                todos: this.state.todos.remove(todo),\n                                finished: this.state.finished.add([todo, new Date()]),\n                            };\n                        })}}\n                    />\n                )}\n                {!this.state.finished.isEmpty() && !this.state.todos.isEmpty() && <hr />}\n                {this.state.finished.map(([todo, date]) =>\n                    <Todo\n                        key={i++}\n                        value={todo}\n                        buttonStyle={this.buttonStyle}\n                        timeCompleted={date}\n                    />\n                )}\n            </ul>\n        );\n    }\n\n    render() {\n        return (\n            <div style={this.styles}>\n                <h3>To dos</h3>\n                {this.renderTodos()}\n                <Form\n                    addTodo={(todo) => {this.setState(prevState => ({todos: prevState.todos.add(todo)}))}}\n                    buttonStyle={this.buttonStyle}\n                />\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}